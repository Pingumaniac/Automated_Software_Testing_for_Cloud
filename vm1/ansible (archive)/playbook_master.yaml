---
- name: Set global variables
  hosts: localhost
  connection: local
  vars_files:
    - variables.yaml
  tasks:
    - name: Set facts for use in other plays
      set_fact:
        local_user: "{{ local_user }}"
        cloud_user: "{{ cloud_user }}"
        vm_names: "{{ vm_names }}"
        inventory_file: "{{ inventory_file }}"
        ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file }}"
        chameleon_cloud: "{{ chameleon_cloud }}"
        openstack_password: "{{ openstack_password }}"
        vm_image: "{{ vm_image }}"
        vm_flavor: "{{ vm_flavor }}"
        vm_network: "{{ vm_network }}"
        vm_security_groups: "{{ vm_security_groups }}"
        vm_key_name: "{{ vm_key_name }}"

- name: Validate required variables
  hosts: localhost
  connection: local
  tasks:
    - import_tasks: tasks/playbook_check_variables.yaml

- name: Create VMs on Chameleon Cloud
  hosts: localhost
  connection: local
  collections:
    - openstack.cloud
  tasks:
    - import_tasks: tasks/playbook_create_vms.yaml

- name: Gather facts and configure Cloud VMs
  hosts: localhost
  remote_user: "{{ local_user }}"
  become: false
  tasks:
    - import_tasks: tasks/playbook_retrieve_facts_vms.yaml
    - name: Refresh inventory
      meta: refresh_inventory
    - name: Add CloudVMs to inventory
      add_host:
        name: "{{ item.name }}"
        ansible_host: "{{ item.ip }}"
        ansible_user: "cc"
        ansible_ssh_private_key_file: "~/.ssh/team6.pem"
        groups: CloudVMs
      loop: "{{ vm_names | zip(vm_ips) | map('flatten') }}"

- name: Install dependencies on Cloud VMs
  hosts: CloudVMs
  become: true
  gather_facts: false
  tasks:
    - name: Wait for SSH connection
      wait_for_connection:
        timeout: 300
    - name: Gather facts
      setup:
    - import_tasks: tasks/playbook_install_apt_packages.yaml
    - import_tasks: tasks/playbook_install_pip_packages.yaml
    - name: Install Docker
      import_tasks: tasks/playbook_install_docker.yaml

- name: Configure firewall rules
  hosts: CloudVMs
  become: true
  tasks:
    - name: Open necessary ports
      firewalld:
        port: "{{ item }}/tcp"
        permanent: yes
        state: enabled
      loop:
        - 22   # SSH
        - 27017 # MongoDB
        - 5000 # FastAPI
    - name: Reload firewall
      command: firewall-cmd --reload

- name: Install and configure MongoDB on VM3
  hosts: vm3
  become: true
  tasks:
    - name: Install gnupg and curl
      apt:
        name:
          - gnupg
          - curl
        state: present
        update_cache: yes
    - name: Import MongoDB public GPG Key
      shell: curl -fsSL https://www.mongodb.org/static/pgp/server-8.0.asc | gpg -o /usr/share/keyrings/mongodb-server-8.0.gpg --dearmor
      args:
        creates: /usr/share/keyrings/mongodb-server-8.0.gpg
    - name: Add MongoDB Repository
      shell: echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-8.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/8.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-8.0.list
      args:
        creates: /etc/apt/sources.list.d/mongodb-org-8.0.list
    - name: Update apt cache
      apt:
        update_cache: yes
    - name: Install MongoDB
      apt:
        name: mongodb-org
        state: present
    - name: Configure MongoDB to bind to all IPs
      lineinfile:
        path: /etc/mongod.conf
        regexp: '^  bindIp:'
        line: '  bindIp: 0.0.0.0'
        backrefs: yes
    - name: Start MongoDB service
      systemd:
        name: mongod
        state: started
        enabled: yes

- name: Deploy FastAPI on VM4
  hosts: vm4
  become: true
  tasks:
    - name: Install Python dependencies for FastAPI
      pip:
        name:
          - fastapi
          - uvicorn
          - pydantic
          - dnspython
        state: present
    - name: Deploy FastAPI application
      copy:
        src: /path/to/fastapi/app
        dest: /opt/fastapi/app
    - name: Start FastAPI server
      shell: |
        nohup uvicorn app.main:app --host 0.0.0.0 --port 5000 &
      args:
        chdir: /opt/fastapi/app
